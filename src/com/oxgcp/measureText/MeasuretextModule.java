/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.oxgcp.measureText;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import android.app.Activity;
import android.util.DisplayMetrics;

import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.Layout.Alignment;

import android.widget.TextView;
import android.util.TypedValue;

import android.graphics.Paint;
import android.graphics.Rect;


@Kroll.module(name="Measuretext", id="com.oxgcp.measureText")
public class MeasuretextModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "MeasuretextModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public MeasuretextModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	// Methods
	@Kroll.method
	public String example()
	{
		Log.d(LCAT, "example called");
		return "hello world";
	}
	
	// Methods
	@Kroll.method
	public float measureTextWidth(String text, int fontSize, String unit)
	{
		Paint p = new Paint();
		TextView t = new TextView(this.getActivity());
		// Rect bounds = new Rect();
		int _unit;
		
		if (unit.equals("sp")) {
			_unit = TypedValue.COMPLEX_UNIT_SP;
		}
		else if (unit.equals("dp") || unit.equals("dip")) {
			_unit = TypedValue.COMPLEX_UNIT_DIP;
		}
		else  if (unit.equals("px")) {
			_unit = TypedValue.COMPLEX_UNIT_PX;
		}
		else if (unit.equals("pt")) {
			_unit = TypedValue.COMPLEX_UNIT_PT;
		}
		else {
			_unit = TypedValue.COMPLEX_UNIT_PT;
		}
		
		t.setTextSize(_unit, fontSize);
		Log.d("TiAPI", "fontSize > " + t.getTextSize());
		p.setTextSize(t.getTextSize());
		// p.getTextBounds(text, 0, text.length(), bounds);
		
		// float mt = p.measureText(s);
		// int bw = bounds.width();

		return p.measureText(text);
	}
	
	// Methods
	@Kroll.method
	public float measureTextHeight(String text, int fontSize, String unit, int widthLimit)
	{
		Activity activity = this.getActivity();
		TextView t = new TextView(activity);
		
		DisplayMetrics outMetrics = new DisplayMetrics();
		activity.getWindowManager().getDefaultDisplay().getMetrics(outMetrics);
		widthLimit *= outMetrics.density; 
		
		Log.d("TiAPI", "dp to px > " + widthLimit);
		
		int _unit;
		
		if (unit.equals("sp")) {
			_unit = TypedValue.COMPLEX_UNIT_SP;
		}
		else if (unit.equals("dp") || unit.equals("dip")) {
			_unit = TypedValue.COMPLEX_UNIT_DIP;
		}
		else  if (unit.equals("px")) {
			_unit = TypedValue.COMPLEX_UNIT_PX;
		}
		else if (unit.equals("pt")) {
			_unit = TypedValue.COMPLEX_UNIT_PT;
		}
		else {
			_unit = TypedValue.COMPLEX_UNIT_PT;
		}
		
		t.setTextSize(_unit, fontSize);
		
		StaticLayout layout = new StaticLayout(text, t.getPaint(), widthLimit , Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
		return layout.getHeight();
	}
	
	// Properties
	@Kroll.getProperty
	public String getExampleProp()
	{
		Log.d(LCAT, "get example property");
		return "hello world";
	}
	
	
	@Kroll.setProperty
	public void setExampleProp(String value) {
		Log.d(LCAT, "set example property: " + value);
	}

}

